{"name": "Verify jobs menu expands and submenu is visible", "status": "failed", "statusDetails": {"message": "Failed: Message: invalid argument: 'value' must be a string\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00B6D363+60275]\n\tGetHandleVerifier [0x00B6D3A4+60340]\n\t(No symbol) [0x009A06F3]\n\t(No symbol) [0x009E81CB]\n\t(No symbol) [0x009E8A2B]\n\t(No symbol) [0x00A30EE2]\n\t(No symbol) [0x00A0D0D4]\n\t(No symbol) [0x00A2E6EB]\n\t(No symbol) [0x00A0CE86]\n\t(No symbol) [0x009DC623]\n\t(No symbol) [0x009DD474]\n\tGetHandleVerifier [0x00DB8FE3+2467827]\n\tGetHandleVerifier [0x00DB45E6+2448886]\n\tGetHandleVerifier [0x00DCF80C+2560028]\n\tGetHandleVerifier [0x00B83DF5+153093]\n\tGetHandleVerifier [0x00B8A3BD+179149]\n\tGetHandleVerifier [0x00B74BB8+91080]\n\tGetHandleVerifier [0x00B74D60+91504]\n\tGetHandleVerifier [0x00B5FA10+4640]\n\tBaseThreadInitThunk [0x76CF5D49+25]\n\tRtlInitializeExceptionChain [0x77C9CF0B+107]\n\tRtlGetAppContainerNamedObjectPath [0x77C9CE91+561]", "trace": "self = <webdriver.WebDriverHelperNew.WebDriverHelper object at 0x000002D4CE6AB050>, condition = 'visible', locator = 'xpath', value = ('xpath', \"//*[contains(@class,'nav-jobs')]\")\nwait_time = 30\n\n    def find_element(self, condition, locator, value, wait_time=30):\n        \"\"\"Finds an element based on the provided condition and locator.\"\"\"\n        wait = WebDriverWait(self.driver, wait_time)\n    \n        locator_map = {\n            'visible': EC.visibility_of_element_located,\n            'selected': EC.element_to_be_selected,\n            'clickable': EC.element_to_be_clickable,\n            'presence': EC.presence_of_element_located\n        }\n    \n        if condition not in locator_map:\n            raise ValueError(f\"Unknown condition: {condition}\")\n    \n        by = {\n            'xpath': By.XPATH,\n            'id': By.ID,\n            'css': By.CSS_SELECTOR,\n            'classname': By.CLASS_NAME,\n            'tagname': By.TAG_NAME,\n            'linktext': By.LINK_TEXT,\n            'partiallinktext': By.PARTIAL_LINK_TEXT,\n            'name': By.NAME\n        }\n    \n        if locator not in by:\n            raise ValueError(f\"Unknown locator: {locator}\")\n    \n        try:\n>           element = wait.until(locator_map[condition]((by[locator], value)))\n\nwebdriver\\WebDriverHelperNew.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D4CE6A9AC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'value\\' must be a string...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77C9CF0B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C9CE91+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'value' must be a string\nE         (Session info: chrome=135.0.7049.96)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B6D363+60275]\nE       \tGetHandleVerifier [0x00B6D3A4+60340]\nE       \t(No symbol) [0x009A06F3]\nE       \t(No symbol) [0x009E81CB]\nE       \t(No symbol) [0x009E8A2B]\nE       \t(No symbol) [0x00A30EE2]\nE       \t(No symbol) [0x00A0D0D4]\nE       \t(No symbol) [0x00A2E6EB]\nE       \t(No symbol) [0x00A0CE86]\nE       \t(No symbol) [0x009DC623]\nE       \t(No symbol) [0x009DD474]\nE       \tGetHandleVerifier [0x00DB8FE3+2467827]\nE       \tGetHandleVerifier [0x00DB45E6+2448886]\nE       \tGetHandleVerifier [0x00DCF80C+2560028]\nE       \tGetHandleVerifier [0x00B83DF5+153093]\nE       \tGetHandleVerifier [0x00B8A3BD+179149]\nE       \tGetHandleVerifier [0x00B74BB8+91080]\nE       \tGetHandleVerifier [0x00B74D60+91504]\nE       \tGetHandleVerifier [0x00B5FA10+4640]\nE       \tBaseThreadInitThunk [0x76CF5D49+25]\nE       \tRtlInitializeExceptionChain [0x77C9CF0B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C9CE91+561]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_home_page.TestHomePage object at 0x000002D4CE692090>\n\n    @allure.title(\"Verify jobs menu expands and submenu is visible\")\n    @allure.tag(\"Regression\")\n    def test_expand_jobs_menu(self):\n        with allure.step(\"Clicking Jobs menu and checking for submenu visibility\"):\n            log.info(\"Clicking on Jobs menu\")\n>           self.home_page.click_jobs_menu()\n\ntestsuites\\jobeze\\test_home_page.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\JobezePGObject\\HomePage.py:59: in click_jobs_menu\n    self.helper.click_element(self.JOBS_MENU, \"Clicking Jobs Menu\")\nwebdriver\\WebDriverHelperNew.py:152: in click_element\n    element = self.find_element('visible', 'xpath', element_xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <webdriver.WebDriverHelperNew.WebDriverHelper object at 0x000002D4CE6AB050>, condition = 'visible', locator = 'xpath', value = ('xpath', \"//*[contains(@class,'nav-jobs')]\")\nwait_time = 30\n\n    def find_element(self, condition, locator, value, wait_time=30):\n        \"\"\"Finds an element based on the provided condition and locator.\"\"\"\n        wait = WebDriverWait(self.driver, wait_time)\n    \n        locator_map = {\n            'visible': EC.visibility_of_element_located,\n            'selected': EC.element_to_be_selected,\n            'clickable': EC.element_to_be_clickable,\n            'presence': EC.presence_of_element_located\n        }\n    \n        if condition not in locator_map:\n            raise ValueError(f\"Unknown condition: {condition}\")\n    \n        by = {\n            'xpath': By.XPATH,\n            'id': By.ID,\n            'css': By.CSS_SELECTOR,\n            'classname': By.CLASS_NAME,\n            'tagname': By.TAG_NAME,\n            'linktext': By.LINK_TEXT,\n            'partiallinktext': By.PARTIAL_LINK_TEXT,\n            'name': By.NAME\n        }\n    \n        if locator not in by:\n            raise ValueError(f\"Unknown locator: {locator}\")\n    \n        try:\n            element = wait.until(locator_map[condition]((by[locator], value)))\n            return element\n        except Exception as e:\n>           pytest.fail(str(e))\nE           Failed: Message: invalid argument: 'value' must be a string\nE             (Session info: chrome=135.0.7049.96)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00B6D363+60275]\nE           \tGetHandleVerifier [0x00B6D3A4+60340]\nE           \t(No symbol) [0x009A06F3]\nE           \t(No symbol) [0x009E81CB]\nE           \t(No symbol) [0x009E8A2B]\nE           \t(No symbol) [0x00A30EE2]\nE           \t(No symbol) [0x00A0D0D4]\nE           \t(No symbol) [0x00A2E6EB]\nE           \t(No symbol) [0x00A0CE86]\nE           \t(No symbol) [0x009DC623]\nE           \t(No symbol) [0x009DD474]\nE           \tGetHandleVerifier [0x00DB8FE3+2467827]\nE           \tGetHandleVerifier [0x00DB45E6+2448886]\nE           \tGetHandleVerifier [0x00DCF80C+2560028]\nE           \tGetHandleVerifier [0x00B83DF5+153093]\nE           \tGetHandleVerifier [0x00B8A3BD+179149]\nE           \tGetHandleVerifier [0x00B74BB8+91080]\nE           \tGetHandleVerifier [0x00B74D60+91504]\nE           \tGetHandleVerifier [0x00B5FA10+4640]\nE           \tBaseThreadInitThunk [0x76CF5D49+25]\nE           \tRtlInitializeExceptionChain [0x77C9CF0B+107]\nE           \tRtlGetAppContainerNamedObjectPath [0x77C9CE91+561]\n\nwebdriver\\WebDriverHelperNew.py:57: Failed"}, "steps": [{"name": "Clicking Jobs menu and checking for submenu visibility", "status": "failed", "statusDetails": {"message": "Failed: Message: invalid argument: 'value' must be a string\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00B6D363+60275]\n\tGetHandleVerifier [0x00B6D3A4+60340]\n\t(No symbol) [0x009A06F3]\n\t(No symbol) [0x009E81CB]\n\t(No symbol) [0x009E8A2B]\n\t(No symbol) [0x00A30EE2]\n\t(No symbol) [0x00A0D0D4]\n\t(No symbol) [0x00A2E6EB]\n\t(No symbol) [0x00A0CE86]\n\t(No symbol) [0x009DC623]\n\t(No symbol) [0x009DD474]\n\tGetHandleVerifier [0x00DB8FE3+2467827]\n\tGetHandleVerifier [0x00DB45E6+2448886]\n\tGetHandleVerifier [0x00DCF80C+2560028]\n\tGetHandleVerifier [0x00B83DF5+153093]\n\tGetHandleVerifier [0x00B8A3BD+179149]\n\tGetHandleVerifier [0x00B74BB8+91080]\n\tGetHandleVerifier [0x00B74D60+91504]\n\tGetHandleVerifier [0x00B5FA10+4640]\n\tBaseThreadInitThunk [0x76CF5D49+25]\n\tRtlInitializeExceptionChain [0x77C9CF0B+107]\n\tRtlGetAppContainerNamedObjectPath [0x77C9CE91+561]\n\n", "trace": "  File \"C:\\Internal\\automation-framework-master\\testsuites\\jobeze\\test_home_page.py\", line 32, in test_expand_jobs_menu\n    self.home_page.click_jobs_menu()\n  File \"C:\\Internal\\automation-framework-master\\Pages\\JobezePGObject\\HomePage.py\", line 59, in click_jobs_menu\n    self.helper.click_element(self.JOBS_MENU, \"Clicking Jobs Menu\")\n  File \"C:\\Internal\\automation-framework-master\\webdriver\\WebDriverHelperNew.py\", line 152, in click_element\n    element = self.find_element('visible', 'xpath', element_xpath)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Internal\\automation-framework-master\\webdriver\\WebDriverHelperNew.py\", line 57, in find_element\n    pytest.fail(str(e))\n  File \"C:\\Internal\\automation-framework-master\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "Find element Clicking Jobs Menu", "status": "failed", "statusDetails": {"message": "Failed: Message: invalid argument: 'value' must be a string\n  (Session info: chrome=135.0.7049.96)\nStacktrace:\n\tGetHandleVerifier [0x00B6D363+60275]\n\tGetHandleVerifier [0x00B6D3A4+60340]\n\t(No symbol) [0x009A06F3]\n\t(No symbol) [0x009E81CB]\n\t(No symbol) [0x009E8A2B]\n\t(No symbol) [0x00A30EE2]\n\t(No symbol) [0x00A0D0D4]\n\t(No symbol) [0x00A2E6EB]\n\t(No symbol) [0x00A0CE86]\n\t(No symbol) [0x009DC623]\n\t(No symbol) [0x009DD474]\n\tGetHandleVerifier [0x00DB8FE3+2467827]\n\tGetHandleVerifier [0x00DB45E6+2448886]\n\tGetHandleVerifier [0x00DCF80C+2560028]\n\tGetHandleVerifier [0x00B83DF5+153093]\n\tGetHandleVerifier [0x00B8A3BD+179149]\n\tGetHandleVerifier [0x00B74BB8+91080]\n\tGetHandleVerifier [0x00B74D60+91504]\n\tGetHandleVerifier [0x00B5FA10+4640]\n\tBaseThreadInitThunk [0x76CF5D49+25]\n\tRtlInitializeExceptionChain [0x77C9CF0B+107]\n\tRtlGetAppContainerNamedObjectPath [0x77C9CE91+561]\n\n", "trace": "  File \"C:\\Internal\\automation-framework-master\\webdriver\\WebDriverHelperNew.py\", line 152, in click_element\n    element = self.find_element('visible', 'xpath', element_xpath)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Internal\\automation-framework-master\\webdriver\\WebDriverHelperNew.py\", line 57, in find_element\n    pytest.fail(str(e))\n  File \"C:\\Internal\\automation-framework-master\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "start": 1746163049430, "stop": 1746163049437}], "start": 1746163049430, "stop": 1746163049437}], "attachments": [{"source": "c29041f7-9f93-471b-bd1e-d40f08f23e09-attachment.png", "type": "image/png"}, {"name": "log", "source": "81e0fa7a-a536-4156-97ed-e43ce08a8150-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d59e43c4-1b79-4aea-82e6-3afa4e9894bc-attachment.txt", "type": "text/plain"}], "start": 1746163049429, "stop": 1746163049439, "uuid": "c2cf6429-bd08-49ed-866e-b3efa3f0439f", "historyId": "32334ff3410c4529fb9f4b33879c9806", "testCaseId": "32334ff3410c4529fb9f4b33879c9806", "fullName": "testsuites.jobeze.test_home_page.TestHomePage#test_expand_jobs_menu", "labels": [{"name": "feature", "value": "Jobeze Home Page Tests"}, {"name": "tag", "value": "Regression"}, {"name": "parentSuite", "value": "testsuites.jobeze"}, {"name": "suite", "value": "test_home_page"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "DESKTOP-BR6BRT3"}, {"name": "thread", "value": "30548-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testsuites.jobeze.test_home_page"}]}